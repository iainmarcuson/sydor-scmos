#---------------------------
# MMPAD-Specfic Parameters
#---------------------------

record(mbbo, "$(P)$(R)TriggerMode")
{
field(PINI, "YES")
field(VAL, "0")
field(ZRVL, "0")
field(ZRST, "Software")
field(ONVL, "1")
field(ONST, "Hardware")
field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TRIGGER_MODE")
}

record(mbbi, "$(P)$(R)TriggerMode_RBV")
{
field(ZRVL, "0")
field(ZRST, "Software")
field(ONVL, "1")
field(ONST, "Hardware")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TRIGGER_MODE")
}

#----------------------------------
# Start Run
#----------------------------------
record (bo, "$(P)$(R)StartRun")
{
    field (DESC, "Start Run")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_START_RUN")
    field (ZNAM, "Disable")
    field (ONAM, "Enable")
    field (VAL,  "0")
    #field (PINI, "YES")
}

#----------------------------------
# Start DataViewer Acquisition
#----------------------------------

record(longout, "$(P)$(R)DVStart")
{
field (DESC, "Start DataViewr Acq")
field (DTYP, "asynInt32")
field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_RUN_START")
field (VAL, "1")
}

#----------------------------------
# Select Run for Display
#----------------------------------

record(longout, "$(P)$(R)SelectRun")
{
field (DESC, "Select DataViewer Display")
field (DTYP, "asynInt32")
field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_SELECT_RUN")
field (VAL, "1")
}

#----------------------------------
# Select number of frames to load
#----------------------------------

record(longout, "$(P)$(R)LoadNumFrames")
{
field (DESC, "Frames to Load")
field (DTYP, "asynInt32")
field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_LD_NUM_FRAMES")
field (VAL, "1")
}

record(longin, "$(P)$(R)LoadNumFrames_RBV")
{
field (DESC, "Frames to Load")
field (DTYP, "asynInt32")
field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_LD_NUM_FRAMES")
}

#----------------------------------
# Software trigger GO!
#----------------------------------
record (bo, "$(P)$(R)DoTrigger")
{
    field (DESC, "Do a Software Trigger")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_DO_TRIGGER")
    field (ZNAM, "Disable")
    field (ONAM, "Enable")
    field (VAL,  "0")
    #field (PINI, "YES")
}


#----------------------------------
# Sensor Power
#----------------------------------
record (bo, "$(P)$(R)SensorPower")
{
    field (DESC, "Sensor Power")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_SENSOR_POWER")
    field (ZNAM, "Off")
    field (ONAM, "On")
    field (VAL,  "0")
    #field (PINI, "YES")
}

record(bi, "$(P)$(R)SensorPower_RBV")
{
field(DTYP, "asynInt32")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_SENSOR_POWER")
field (ZNAM, "Disable")
field (ONAM, "Enable")
field (VAL,  "0")
field(SCAN, "I/O Intr")
}

#-----------------
# Sensor Bias
#-----------------

record(mbbo, "$(P)$(R)BiasRoute")
{
field(PINI, "YES")
field(VAL, "0")
field(ZRVL, "0")
field(ZRST, "Float")
field(ONVL, "1")
field(ONST, "ON")
field(TWVL, "2")
field(TWST, "Shunt")
field(DTYP, "asynInt32")
field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_ROUTE_BIAS")
}

record(mbbi, "$(P)$(R)BiasRoute_RBV")
{
field(ZRVL, "0")
field(ZRST, "Float")
field(ONVL, "1")
field(ONST, "ON")
field(TWVL, "2")
field(TWST, "Shunt")
field(DTYP, "asynInt32")
field(SCAN, "I/O Intr")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_ROUTE_BIAS")
}

#----------------------------------
# Shutter Start and Stop Modes
#----------------------------------

record(mbbo, "$(P)$(R)ShutterStartMode")
{
field(PINI, "YES")
field(VAL, "0")
field(ZRVL, "0")
field(ZRST, "Disabled")
field(ONVL, "1")
field(ONST, "ShutterOpenBit")
field(TWVL, "2")
field(TWST, "Exp Mode N cmd")
field(THVL, "3")
field(THST, "Trigger BNC")
field(FRVL, "4")
field(FRST, "ShutterClose ris edge BNC")
field(DTYP, "asynInt32")
field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_SHUTTER_START_MODE")
}

record(mbbi, "$(P)$(R)ShutterStartMode_RBV")
{
field(ZRVL, "0")
field(ZRST, "Disabled")
field(ONVL, "1")
field(ONST, "ShutterOpenBit")
field(TWVL, "2")
field(TWST, "Exp Mode N cmd")
field(THVL, "3")
field(THST, "Trigger BNC")
field(FRVL, "4")
field(FRST, "ShutterClose ris edge BNC")
field(DTYP, "asynInt32")
field(SCAN, "I/O Intr")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_SHUTTER_START_MODE")
}

record(mbbo, "$(P)$(R)ShutterStopMode")
{
field(ZRVL, "0")
field(ZRST, "Stop after delay2")
field(ONVL, "1")
field(ONST, "ShutterOpenBit")
field(TWVL, "2")
field(TWST, "Exp Mode N cmd")
field(THVL, "3")
field(THST, "ShutterClose ris edge BNC")
field(FRVL, "4")
field(FRST, "ShutterClose fal edge BNC")
field(DTYP, "asynInt32")
field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_SHUTTER_STOP_MODE")
}

record(mbbi, "$(P)$(R)ShutterStopMode_RBV")
{
field(ZRVL, "0")
field(ZRST, "Stop after delay2")
field(ONVL, "1")
field(ONST, "ShutterOpenBit")
field(TWVL, "2")
field(TWST, "Exp Mode N cmd")
field(THVL, "3")
field(THST, "ShutterClose ris edge BNC")
field(FRVL, "4")
field(FRST, "ShutterClose fal edge BNC")
field(SCAN, "I/O Intr")
field(DTYP, "asynInt32")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_SHUTTER_STOP_MODE")
}


#----------------------------------
# Sensor Power
#----------------------------------
record (bo, "$(P)$(R)SensorBias")
{
    field (DESC, "Sensor Bias")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_SENS_BIAS")
    field (ZNAM, "Off")
    field (ONAM, "On")
    field (VAL,  "0")
}

record(bi, "$(P)$(R)SensorBias_RBV")
{
field(DTYP, "asynInt32")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_SENS_BIAS")
field (ZNAM, "Off")
field (ONAM, "On")
field (VAL,  "0")
field(SCAN, "I/O Intr")
}

#---------------------------
# Bias Routing
#---------------------------



###################################################################
#  These records control the acquisition time and                 #
#  period                                                         # 
###################################################################


record(stringout, "$(P)$(R)QueryPlugin")
{
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_COMMAND_OUT")
   field(VAL,  "Unknown")
}


#record(stringout, "$(P)$(R)RunName")
#{
#   field(DTYP, "asynOctetWrite")
#   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_RUN_NAME")
#   field(VAL,  "Unknown")
#}
#record(stringout, "$(P)$(R)SetName")
#{
#   field(DTYP, "asynOctetWrite")
#   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_SET_NAME")
#   field(VAL,  "Unknown")
#}

record(stringout, "$(P)$(R)SetDescription")
{
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_SET_DESCRIPTION")
   field(VAL,  "Unknown")
}


record (bo, "$(P)$(R)CorGeoEn")
{
field(DESC, "Enable Geocorrection")
field(DTYP, "asynInt32")
field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_GEOCORRECT_EN")
field(ZNAM, "Disable")
field(ONAM, "Enable")
field(VAL, "0")
}

#--------------------------------
# Corrections
#--------------------------------

record (bi, "$(P)$(R)CorGeoEn_RBV")
{
field(DESC, "Enable Geocorrection")
field(DTYP, "asynInt32")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_GEOCORRECT_EN")
field(ZNAM, "Disable")
field(ONAM, "Enable")
field(VAL, "0")
field(SCAN, "I/O Intr")
}

#----------------------------------
# Query of per-cap parameters
#----------------------------------

record(fanout, "$(P)$(R)CapGain_QAll")
{
field(LNK0, "$(P)$(R)Cap1Gain_Q")
field(LNK1, "$(P)$(R)Cap2Gain_Q")
field(LNK2, "$(P)$(R)Cap3Gain_Q")
field(LNK3, "$(P)$(R)Cap4Gain_Q")
field(LNK4, "$(P)$(R)Cap5Gain_Q")
field(LNK5, "$(P)$(R)Cap6Gain_Q")
field(LNK6, "$(P)$(R)Cap7Gain_Q")
field(LNK7, "$(P)$(R)Cap8Gain_Q")
}

record(fanout, "$(P)$(R)CapInteg_QAll")
{
field(LNK0, "$(P)$(R)Cap1Integ_Q")
field(LNK1, "$(P)$(R)Cap2Integ_Q")
field(LNK2, "$(P)$(R)Cap3Integ_Q")
field(LNK3, "$(P)$(R)Cap4Integ_Q")
field(LNK4, "$(P)$(R)Cap5Integ_Q")
field(LNK5, "$(P)$(R)Cap6Integ_Q")
field(LNK6, "$(P)$(R)Cap7Integ_Q")
field(LNK7, "$(P)$(R)Cap8Integ_Q")
}

record(fanout, "$(P)$(R)CapInter_QAll")
{
field(LNK0, "$(P)$(R)Cap1Inter_Q")
field(LNK1, "$(P)$(R)Cap2Inter_Q")
field(LNK2, "$(P)$(R)Cap3Inter_Q")
field(LNK3, "$(P)$(R)Cap4Inter_Q")
field(LNK4, "$(P)$(R)Cap5Inter_Q")
field(LNK5, "$(P)$(R)Cap6Inter_Q")
field(LNK6, "$(P)$(R)Cap7Inter_Q")
field(LNK7, "$(P)$(R)Cap8Inter_Q")
}

