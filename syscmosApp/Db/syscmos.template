#================================================
# template for Dectris Mythen Driver


## YF ## try include "ADBase.template"
include "ADBase.template"

#----------------------------------
# ADBase Overrides
#----------------------------------

record(longout, "$(P)$(R)BinX")
{
    field(PINI, "NO")
}

record(longout, "$(P)$(R)BinY")
{
    field(PINI, "NO")
}

record(longout, "$(P)$(R)MinX")
{
    field(PINI, "NO")
}

record(longout, "$(P)$(R)MinY")
{
    field(PINI, "NO")
}

record(longout, "$(P)$(R)SizeX")
{
    field(PINI, "NO")
}

record(longout, "$(P)$(R)SizeY")
{
field(PINI, "NO")
}

record(bo, "$(P)$(R)ReverseX")
{
field(PINI, "NO")
}

record(bo, "$(P)$(R)ReverseY")
{
field(PINI, "NO")
}

record(ao, "$(P)$(R)AcquireTime")
{
field(PINI, "NO")
}

record(ao, "$(P)$(R)AcquirePeriod")
{
field(PINI, "NO")
}

record(ao, "$(P)$(R)Gain")
{
field(PINI, "NO")
}

record(mbbo, "$(P)$(R)FrameType")
{
field(PINI, "NO")
}

#XXX Was this to be disabled as well?
record(mbbo, "$(P)$(R)ImageMode")
{
field(PINI, "NO")
}


record(longout, "$(P)$(R)NumExposures")
{
field(PINI, "NO")
}

record(longout, "$(P)$(R)NumImages")
{
field(PINI, "NO")
}

record(mbbo, "$(P)$(R)ShutterMode")
{
field(PINI, "NO")
}

record(bo, "$(P)$(R)ShutterControl")
{
field(PINI, "NO")
}

record(ao, "$(P)$(R)ShutterOpenDelay")
{
field(PINI, "NO")
}

record(ao, "$(P)$(R)ShutterCloseDelay")
{
field(PINI, "NO")
}

#----------------------------------
# Per-camera file
#----------------------------------

include "scmos.template"

#----------------------------------
# PV Companions for Queries
#----------------------------------

include "gc_query.db"
include "gc_params.db"

#---------------------------------
# Link Status
#---------------------------------

record(longout, "$(P)$(R)LinkStatus")
{
field (DESC, "Check camera link")
field (DTYP, "asynInt32")
field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_LINK_STATUS")
field (VAL, "1")
}

record(longin, "$(P)$(R)LinkStatus_RBV")
{
field (DESC, "Check camera link RBV")
field (DTYP, "asynInt32")
field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_LINK_STATUS")
field (SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)EPICSLink_RBV")
{
field (DESC, "Check EPICS link RBV")
field (DTYP, "asynInt32")
field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_EPICS_STATUS")
field (SCAN, "I/O Intr")
}


#----------------------------------
# Interframe Time
#----------------------------------
record(ao, "$(P)$(R)InterframeTime")
{
    field (DESC, "Interframe time")
    field (DTYP, "asynFloat64")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_INTERFRAME_TIME")
    field (EGU,  "us")
    field (PREC, "4")
    field (VAL,  "0.0")
    #field (PINI, "YES")
}

record(ai, "$(P)$(R)InterframeTime_RBV")
{
field(DESC, "Interframe time")
field(DTYP, "asynFloat64")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_INTERFRAME_TIME")
    field (EGU,  "us")
    field (PREC, "4")
    field(SCAN, "I/O Intr")
    }

record(ai, "$(P)$(R)DelayTime_RBV")
{
    field(DESC, "Delay after trigger")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_DELAY_TIME")
    field(EGU,  "s")
    field(PREC, "7")
    field(SCAN, "I/O Intr")
}

#----------------------------------
# Number of Frames
#----------------------------------
record (longout, "$(P)$(R)NumFrames")
{
    field (DESC, "Number of frames")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_NUM_FRAMES")
    field (VAL,  "1")
    #field (PINI, "YES")
}

record (longin, "$(P)$(R)NumFrames_RBV")
{
    field (DESC, "Number of frames")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_NUM_FRAMES")
    field (SCAN, "I/O Intr")
}


#----------------------------------
# Firmware Version
#----------------------------------
record(stringin, "$(P)$(R)FirmwareVersion")
{
   #field(PINI, "YES")
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_FIRMWARE_VERSION")
}

record(mbbo, "$(P)$(R)ImageMode")
{
   #field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "")
   field(TWVL, "")
   field(VAL,  "")
   info(autosaveFields, "VAL")
}



########################
# Correction PVs       #
########################

record (bo, "$(P)$(R)CorRotEn")
{
field(DESC, "Enable Rotation Correction")
field(DTYP, "asynInt32")
field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_COR_ROT_EN")
field(ZNAM, "Disable")
field(ONAM, "Enable")
field(VAL, "0")
}

record (bi, "$(P)$(R)CorRotEn_RBV")
{
field(DESC, "Enable Rotation Correction")
field(DTYP, "asynInt32")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_COR_ROT_EN")
field(ZNAM, "Disable")
field(ONAM, "Enable")
field(VAL, "0")
field(SCAN, "I/O Intr")
}

record (bo, "$(P)$(R)CorGeoEn")
{
field(DESC, "Enable Geocorrection")
field(DTYP, "asynInt32")
field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_GEOCORRECT_EN")
field(ZNAM, "Disable")
field(ONAM, "Enable")
field(VAL, "0")
}

record (bi, "$(P)$(R)CorGeoEn_RBV")
{
field(DESC, "Enable Geocorrection")
field(DTYP, "asynInt32")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_GEOCORRECT_EN")
field(ZNAM, "Disable")
field(ONAM, "Enable")
field(VAL, "0")
field(SCAN, "I/O Intr")
}
