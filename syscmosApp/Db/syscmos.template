#================================================
# template for Dectris Mythen Driver


## YF ## try include "ADBase.template"
include "ADBase.template"

#----------------------------------
# ADBase Overrides
#----------------------------------

record(longout, "$(P)$(R)BinX")
{
    field(PINI, "NO")
}

record(longout, "$(P)$(R)BinY")
{
    field(PINI, "NO")
}

record(longout, "$(P)$(R)MinX")
{
    field(PINI, "NO")
}

record(longout, "$(P)$(R)MinY")
{
    field(PINI, "NO")
}

record(longout, "$(P)$(R)SizeX")
{
    field(PINI, "NO")
}

record(longout, "$(P)$(R)SizeY")
{
field(PINI, "NO")
}

record(bo, "$(P)$(R)ReverseX")
{
field(PINI, "NO")
}

record(bo, "$(P)$(R)ReverseY")
{
field(PINI, "NO")
}

record(ao, "$(P)$(R)AcquireTime")
{
field(PINI, "NO")
}

record(ao, "$(P)$(R)AcquirePeriod")
{
field(PINI, "NO")
}

record(ao, "$(P)$(R)Gain")
{
field(PINI, "NO")
}

record(mbbo, "$(P)$(R)FrameType")
{
field(PINI, "NO")
}

#XXX Was this to be disabled as well?
record(mbbo, "$(P)$(R)ImageMode")
{
field(PINI, "NO")
}

record(mbbo, "$(P)$(R)TriggerMode")
{
field(PINI, "YES")
field(VAL, "0")
field(ZRVL, "4")
field(ZRST, "Software")
field(ONVL, "1")
field(ONST, "Standard")
field(TWVL, "2")
field(TWST, "Synchronous")
field(THVL, "3")
field(THST, "Global")
field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TRIGGER_MODE")
}

record(mbbi, "$(P)$(R)TriggerMode_RBV")
{
field(PINI, "YES")
field(VAL, "0")
field(ZRVL, "4")
field(ZRST, "Software")
field(ONVL, "1")
field(ONST, "Standard")
field(TWVL, "2")
field(TWST, "Synchronous")
field(THVL, "3")
field(THST, "Global")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))TRIGGER_MODE")
}

record(longout, "$(P)$(R)NumExposures")
{
field(PINI, "NO")
}

record(longout, "$(P)$(R)NumImages")
{
field(PINI, "NO")
}

record(mbbo, "$(P)$(R)ShutterMode")
{
field(PINI, "NO")
}

record(bo, "$(P)$(R)ShutterControl")
{
field(PINI, "NO")
}

record(ao, "$(P)$(R)ShutterOpenDelay")
{
field(PINI, "NO")
}

record(ao, "$(P)$(R)ShutterCloseDelay")
{
field(PINI, "NO")
}

#----------------------------------
# PV Companions for Queries
#----------------------------------

include "gc_query.db"
include "gc_params.db"

#----------------------------------
# Detector Setting
#----------------------------------

#YF  [0]

#----------------------------------
# Start Run
#----------------------------------
record (bo, "$(P)$(R)StartRun")
{
    field (DESC, "Start Run")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_START_RUN")
    field (ZNAM, "Disable")
    field (ONAM, "Enable")
    field (VAL,  "0")
    #field (PINI, "YES")
}

#----------------------------------
# Start DataViewer Acquisition
#----------------------------------

record(longout, "$(P)$(R)DVStart")
{
field (DESC, "Start DataViewr Acq")
field (DTYP, "asynInt32")
field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_RUN_START")
field (VAL, "1")
}

#----------------------------------
# Select Run for Display
#----------------------------------

record(longout, "$(P)$(R)SelectRun")
{
field (DESC, "Select DataViewer Display")
field (DTYP, "asynInt32")
field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_SELECT_RUN")
field (VAL, "1")
}

#----------------------------------
# Select number of frames to load
#----------------------------------

record(longout, "$(P)$(R)LoadNumFrames")
{
field (DESC, "Frames to Load")
field (DTYP, "asynInt32")
field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_LD_NUM_FRAMES")
field (VAL, "1")
}

record(longin, "$(P)$(R)LoadNumFrames_RBV")
{
field (DESC, "Frames to Load")
field (DTYP, "asynInt32")
field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_LD_NUM_FRAMES")
}

#----------------------------------
# Software trigger GO!
#----------------------------------
record (bo, "$(P)$(R)DoTrigger")
{
    field (DESC, "Do a Software Trigger")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_DO_TRIGGER")
    field (ZNAM, "Disable")
    field (ONAM, "Enable")
    field (VAL,  "0")
    #field (PINI, "YES")
}


#----------------------------------
# Sensor Power
#----------------------------------
record (bo, "$(P)$(R)SensorPower")
{
    field (DESC, "Sensor Power")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_SENSOR_POWER")
    field (ZNAM, "Disable")
    field (ONAM, "Enable")
    field (VAL,  "0")
    #field (PINI, "YES")
}

record(bi, "$(P)$(R)SensorPower_RBV")
{
field(DTYP, "asynInt32")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_SENSOR_POWER")
field (ZNAM, "Disable")
field (ONAM, "Enable")
field (VAL,  "0")
field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the acquisition time and                 #
#  period                                                         # 
###################################################################


record(stringout, "$(P)$(R)QueryPlugin")
{
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_COMMAND_OUT")
   field(VAL,  "Unknown")
}


#record(stringout, "$(P)$(R)RunName")
#{
#   field(DTYP, "asynOctetWrite")
#   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_RUN_NAME")
#   field(VAL,  "Unknown")
#}
#record(stringout, "$(P)$(R)SetName")
#{
#   field(DTYP, "asynOctetWrite")
#   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_SET_NAME")
#   field(VAL,  "Unknown")
#}

record(stringout, "$(P)$(R)SetDescription")
{
   field(DTYP, "asynOctetWrite")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_SET_DESCRIPTION")
   field(VAL,  "Unknown")
}

## YF[0]


record (mbbo, "$(P)$(R)Setting")
{
    field (DESC, "Detector setting")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_SETTING")
    field (ZRST, "Cu")
    field (ZRVL, "0")
    field (ONST, "Mo")
    field (ONVL, "1")
    field (TWST, "Ag")
    field (TWVL, "2")
    field (THST, "Cr")
    field (THVL, "3")
    field (VAL,  "0")
    #field (PINI, "YES")
}
record (mbbi, "$(P)$(R)Setting_RBV")
{
    field (DESC, "Detector setting")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_SETTING")
    field (ZRST, "Cu")
    field (ZRVL, "0")
    field (ONST, "Mo")
    field (ONVL, "1")
    field (TWST, "Ag")
    field (TWVL, "2")
    field (THST, "Cr")
    field (THVL, "3")
    field (SCAN, "I/O Intr")
}

#---------------------------------
# Link Status
#---------------------------------

record(longout, "$(P)$(R)LinkStatus")
{
field (DESC, "Check camera link")
field (DTYP, "asynInt32")
field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_LINK_STATUS")
field (VAL, "1")
}

record(longin, "$(P)$(R)LinkStatus_RBV")
{
field (DESC, "Check camera link RBV")
field (DTYP, "asynInt32")
field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_LINK_STATUS")
field (SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)EPICSLink_RBV")
{
field (DESC, "Check EPICS link RBV")
field (DTYP, "asynInt32")
field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_EPICS_STATUS")
field (SCAN, "I/O Intr")
}


#----------------------------------
# Delay after trigger
#----------------------------------
record(ao, "$(P)$(R)DelayTime")
{
    field (DESC, "Delay after trigger")
    field (DTYP, "asynFloat64")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_DELAY_TIME")
    field (EGU,  "s")
    field (PREC, "4")
    field (VAL,  "0.1")
    #field (PINI, "YES")
}

#----------------------------------
# Interframe Time
#----------------------------------
record(ao, "$(P)$(R)InterframeTime")
{
    field (DESC, "Interframe time")
    field (DTYP, "asynFloat64")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_INTERFRAME_TIME")
    field (EGU,  "us")
    field (PREC, "4")
    field (VAL,  "0.0")
    #field (PINI, "YES")
}

record(ai, "$(P)$(R)InterframeTime_RBV")
{
field(DESC, "Interframe time")
field(DTYP, "asynFloat64")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_INTERFRAME_TIME")
    field (EGU,  "us")
    field (PREC, "4")
    field(SCAN, "I/O Intr")
    }

record(ai, "$(P)$(R)DelayTime_RBV")
{
    field(DESC, "Delay after trigger")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_DELAY_TIME")
    field(EGU,  "s")
    field(PREC, "7")
    field(SCAN, "I/O Intr")
}

#----------------------------------
# Threshold Energy 
#----------------------------------
record (ao, "$(P)$(R)ThresholdEnergy")
{
    field (DESC, "Threshold energy")
    field (DTYP, "asynFloat64")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_THRESHOLD")
    field (EGU,  "keV")
    field (PREC, "2")
    field (VAL,  "8.05")
    #field (PINI, "YES")
}

record (ai, "$(P)$(R)ThresholdEnergy_RBV")
{
    field (DESC, "Threshold energy")
    field (DTYP, "asynFloat64")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_THRESHOLD")
    field (EGU,  "keV")
    field (PREC, "2")
    field (SCAN, "I/O Intr")
}
#----------------------------------
# Beam Energy 
#----------------------------------
record (ao, "$(P)$(R)BeamEnergy")
{
    field (DESC, "Beam energy")
    field (DTYP, "asynFloat64")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_ENERGY")
    field (EGU,  "keV")
    field (VAL,  "8.1")
    field (PREC, "2")
    #field (PINI, "YES")
}

record (ai, "$(P)$(R)BeamEnergy_RBV")
{
    field (DESC, "Beam energy")
    field (DTYP, "asynFloat64")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_ENERGY")
    field (EGU,  "keV")
    field (PREC, "2")
    field (SCAN, "I/O Intr")
}

#----------------------------------
# Enable Flat Field Correction
#----------------------------------
record (bo, "$(P)$(R)UseFlatField")
{
    field (DESC, "Enable flat field")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_USE_FLATFIELD")
    field (ZNAM, "Disable")
    field (ONAM, "Enable")
    field (VAL,  "1")
    #field (PINI, "YES")
}

record (bi, "$(P)$(R)UseFlatField_RBV")
{
    field (DESC, "Enable flat field")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_USE_FLATFIELD")
    field (ZNAM, "Disabled")
    field (ONAM, "Enabled")
    field (SCAN, "I/O Intr")
}
#----------------------------------
# Enable Count Rate Correction
#----------------------------------
record (bo, "$(P)$(R)UseCountRate")
{
    field (DESC, "Enable count rate")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_USE_COUNTRATE")
    field (ZNAM, "Disable")
    field (ONAM, "Enable")
    field (VAL,  "1")
    #field (PINI, "YES")
}

record (bi, "$(P)$(R)UseCountRate_RBV")
{
    field (DESC, "Enable count rate")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_USE_COUNTRATE")
    field (ZNAM, "Disabled")
    field (ONAM, "Enabled")
    field (SCAN, "I/O Intr")
}

#----------------------------------
# Set Number of Data Bits
#----------------------------------
record (mbbo, "$(P)$(R)BitDepth")
{
    field (DESC, "Detector bit depth")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_BIT_DEPTH")
    field (ZRST, "24")
    field (ZRVL, "0")
    field (ONST, "16")
    field (ONVL, "1")
    field (TWST, "8")
    field (TWVL, "2")
    field (THST, "4")
    field (THVL, "3")
    field (VAL,  "0")
    #field (PINI, "YES")
}

record (longin, "$(P)$(R)BitDepth_RBV")
{
    field (DESC, "Detector bit depth")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_BIT_DEPTH")
    field (SCAN, "I/O Intr")
}


#----------------------------------
# Number of Frames
#----------------------------------
record (longout, "$(P)$(R)NumFrames")
{
    field (DESC, "Number of frames")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_NUM_FRAMES")
    field (VAL,  "1")
    #field (PINI, "YES")
}

record (longin, "$(P)$(R)NumFrames_RBV")
{
    field (DESC, "Number of frames")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_NUM_FRAMES")
    field (SCAN, "I/O Intr")
}


#----------------------------------
# Firmware Version
#----------------------------------
record(stringin, "$(P)$(R)FirmwareVersion")
{
   #field(PINI, "YES")
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_FIRMWARE_VERSION")
}

record(mbbo, "$(P)$(R)ImageMode")
{
   #field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "")
   field(TWVL, "")
   field(VAL,  "")
   info(autosaveFields, "VAL")
}

#----------------------------
# sCMOS Options
#----------------------------

record (bo, "$(P)$(R)DSNU")
{
field(DESC, "Enable DSNU")
field(DTYP, "asynInt32")
field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_DSNU")
field(ZNAM, "Disable")
field(ONAM, "Enable")
field(VAL, "0")
}

record (bi, "$(P)$(R)DSNU_RBV")
{
field(DESC, "Enable DSNU")
field(DTYP, "asynInt32")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_DSNU")
field(ZNAM, "Disable")
field(ONAM, "Enable")
field(VAL, "0")
field(SCAN, "I/O Intr")
}

record (bo, "$(P)$(R)PRNU")
{
field(DESC, "Enable PRNU")
field(DTYP, "asynInt32")
field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_PRNU")
field(ZNAM, "Disable")
field(ONAM, "Enable")
field(VAL, "0")
}

record (bi, "$(P)$(R)PRNU_RBV")
{
field(DESC, "Enable DSNU")
field(DTYP, "asynInt32")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_PRNU")
field(ZNAM, "Disable")
field(ONAM, "Enable")
field(VAL, "0")
field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)CaptureMode")
{
field(DESC, "Caputre Mode")
field(DTYP, "asynInt32")
field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_CAPTURE_MODE")
field(ZRST, "Live")
field(ZRVL, "0")
field(ONST, "Capture to RAM")
field(ONVL, "1")
field(TWST, "Capture to Disk")
field(TWVL, "2")
}

record(mbbi, "$(P)$(R)CaptureMode_RBV")
{
field(DESC, "Caputre Mode")
field(DTYP, "asynInt32")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_CAPTURE_MODE")
field(ZRST, "Live")
field(ZRVL, "0")
field(ONST, "Capture to RAM")
field(ONVL, "1")
field(TWST, "Capture to Disk")
field(TWVL, "2")
field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)Binning")
{
field(DESC, "Binning Mode")
field(DTYP, "asynInt32")
field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_BINNING")
field(ZRST, "1x1")
field(ZRVL, "0")
field(ONST, "2x2")
field(ONVL, "1")
field(TWST, "4x4")
field(TWVL, "2")
}

record(mbbi, "$(P)$(R)Binning_RBV")
{
field(DESC, "Binning Mode")
field(DTYP, "asynInt32")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_BINNING")
field(ZRST, "1x1")
field(ZRVL, "0")
field(ONST, "2x2")
field(ONVL, "1")
field(TWST, "4x4")
field(TWVL, "2")
field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)AccumulateMode")
{
field(DESC, "Accumulate Mode")
field(DTYP, "asynInt32")
field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_ACCUMULATE_MODE")
field(ZRST, "Disabled")
field(ZRVL, "0")
field(ONST, "Enabled")
field(ONVL, "1")
}

record(mbbi, "$(P)$(R)AccumulateMode_RBV")
{
field(DESC, "Accumulate Mode")
field(DTYP, "asynInt32")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_ACCUMULATE_MODE")
field(ZRST, "Disabled")
field(ZRVL, "0")
field(ONST, "Enabled")
field(ONVL, "1")
field(SCAN, "I/O Intr")
}


record(mbbo, "$(P)$(R)GainMode")
{
field(DESC, "Gain Mode")
field(DTYP, "asynInt32")
field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_GAIN_MODE")
field(ZRST, "HDR")
field(ZRVL, "0")
field(ONST, "Std Hi")
field(ONVL, "1")
field(TWST, "Std Lo")
field(TWVL, "2")
}

record(mbbi, "$(P)$(R)GainMode_RBV")
{
field(DESC, "Gain Mode")
field(DTYP, "asynInt32")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_GAIN_MODE")
field(ZRST, "HDR")
field(ZRVL, "0")
field(ONST, "Std Hi")
field(ONVL, "1")
field(TWST, "Std Lo")
field(TWVL, "2")
field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)CaptureMode")
{
field(DESC, "Capture Mode")
field(DTYP, "asynInt32")
field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_CAPTURE_MODE")
field(ZRST, "Live")
field(ZRVL, "0")
field(ONST, "Capture to RAM")
field(ONVL, "1")
field(TWST, "Capture to Disk")
field(TWVL, "2")
}

record(mbbi, "$(P)$(R)CaptureMode_RBV")
{
field(DESC, "Gain Mode")
field(DTYP, "asynInt32")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_CAPTURE_MODE")
field(ZRST, "Live")
field(ZRVL, "0")
field(ONST, "Capture to RAM")
field(ONVL, "1")
field(TWST, "Capture to Disk")
field(TWVL, "2")
field(SCAN, "I/O Intr")
}

########################
# Trigger Options
########################

record(mbbo, "$(P)$(R)InTrigEdge")
{
field(DESC, "Input Trigger Edge")
field(DTYP, "asynInt32")
field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_IN_TRIG_EDGE")
field(ZRST, "Falling")
field(ZRVL, "0")
field(ONST, "Rising")
field(ONVL, "1")
}

record(mbbi, "$(P)$(R)InTrigEdge_RBV")
{
field(DESC, "Input Trigger Edge")
field(DTYP, "asynInt32")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_IN_TRIG_EDGE")
field(ZRST, "Falling")
field(ZRVL, "0")
field(ONST, "Rising")
field(ONVL, "1")
field(SCAN, "I/O Intr")
}


record(mbbo, "$(P)$(R)OutTrigEdge")
{
field(DESC, "Output Trigger Edge")
field(DTYP, "asynInt32")
field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_OUT_TRIG_EDGE")
field(ZRST, "Falling")
field(ZRVL, "0")
field(ONST, "Rising")
field(ONVL, "1")
}

record(mbbi, "$(P)$(R)OutTrigEdge_RBV")
{
field(DESC, "Output Trigger Edge")
field(DTYP, "asynInt32")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_OUT_TRIG_EDGE")
field(ZRST, "Falling")
field(ZRVL, "0")
field(ONST, "Rising")
field(ONVL, "1")
field(SCAN, "I/O Intr")
}


record(mbbo, "$(P)$(R)OutTrigMode")
{
field(DESC, "Output Trigger Mode")
field(DTYP, "asynInt32")
field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_OUT_TRIG_MODE")
field(ZRST, "Exposure Start")
field(ZRVL, "0")
field(ONST, "Readout End")
field(ONVL, "1")
field(TWST, "Global Exposure")
field(TWVL, "2")
field(THST, "Low")
field(THVL, "3")
field(FRST, "High")
field(FRVL, "4")
}

record(mbbi, "$(P)$(R)OutTrigMode_RBV")
{
field(DESC, "Output Trigger Mode")
field(DTYP, "asynInt32")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_OUT_TRIG_MODE")
field(ZRST, "Exposure Start")
field(ZRVL, "0")
field(ONST, "Readout End")
field(ONVL, "1")
field(TWST, "Global Exposure")
field(TWVL, "2")
field(THST, "Low")
field(THVL, "3")
field(FRST, "High")
field(FRVL, "4")
field(SCAN, "I/O Intr")
}



########################
# Correction PVs       #
########################

record (bo, "$(P)$(R)CorRot_En")
{
field(DESC, "Enable Rotation Correction")
field(DTYP, "asynInt32")
field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_COR_ROT_EN")
field(ZNAM, "Disable")
field(ONAM, "Enable")
field(VAL, "0")
}

record (bi, "$(P)$(R)CorRot_En_RBV")
{
field(DESC, "Enable Rotation Correction")
field(DTYP, "asynInt32")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_COR_ROT_EN")
field(ZNAM, "Disable")
field(ONAM, "Enable")
field(VAL, "0")
field(SCAN, "I/O Intr")
}

record (bo, "$(P)$(R)CorGeo_En")
{
field(DESC, "Enable Geocorrection")
field(DTYP, "asynInt32")
field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_GEOCORRECT_EN")
field(ZNAM, "Disable")
field(ONAM, "Enable")
field(VAL, "0")
}

record (bi, "$(P)$(R)CorGeo_En_RBV")
{
field(DESC, "Enable Geocorrection")
field(DTYP, "asynInt32")
field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_GEOCORRECT_EN")
field(ZNAM, "Disable")
field(ONAM, "Enable")
field(VAL, "0")
field(SCAN, "I/O Intr")
}
